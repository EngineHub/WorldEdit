// $Id$
/*
 * WorldEdit
 * Copyright (C) 2010 sk89q <http://www.sk89q.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

package com.sk89q.worldedit.commands;

import java.io.*;
import java.util.Set;
import com.sk89q.minecraft.util.commands.Command;
import com.sk89q.minecraft.util.commands.CommandContext;
import com.sk89q.minecraft.util.commands.CommandPermissions;
import com.sk89q.minecraft.util.commands.Logging;
import static com.sk89q.minecraft.util.commands.Logging.LogMode.*;
import com.sk89q.worldedit.*;
import com.sk89q.worldedit.data.LegacyChunkStore;
import com.sk89q.worldedit.data.McRegionChunkStore;

/**
 * Chunk tools.
 * 
 * @author sk89q
 */
public class ChunkCommands {
    private final WorldEdit we;
    
    public ChunkCommands(WorldEdit we) {
        this.we = we;
    }

    @Command(
        aliases = { "chunkinfo" },
        usage = "",
        desc = "Get information about the chunk that you are inside",
        min = 0,
        max = 0
    )
    @CommandPermissions("worldedit.chunkinfo")
    public void chunkInfo(CommandContext args, LocalSession session, LocalPlayer player,
            EditSession editSession) throws WorldEditException {
        
        Vector pos = player.getBlockIn();
        int chunkX = (int) Math.floor(pos.getBlockX() / 16.0);
        int chunkZ = (int) Math.floor(pos.getBlockZ() / 16.0);

        String folder1 = Integer.toString(WorldEdit.divisorMod(chunkX, 64), 36);
        String folder2 = Integer.toString(WorldEdit.divisorMod(chunkZ, 64), 36);
        String filename = "c." + Integer.toString(chunkX, 36)
                + "." + Integer.toString(chunkZ, 36) + ".dat";

        player.print("Chunk: " + chunkX + ", " + chunkZ);
        player.print("Old format: " + folder1 + "/" + folder2 + "/" + filename);
        player.print("McRegion: region/" + McRegionChunkStore.getFilename(
                new Vector2D(chunkX, chunkZ)));
    }

    @Command(
        aliases = { "listchunks" },
        usage = "",
        desc = "List chunks that your selection includes",
        min = 0,
        max = 0
    )
    @CommandPermissions("worldedit.listchunks")
    public void listChunks(CommandContext args, LocalSession session, LocalPlayer player,
            EditSession editSession) throws WorldEditException {

        Set<Vector2D> chunks = session.getSelection(player.getWorld()).getChunks();

        for (Vector2D chunk : chunks) {
            player.print(LegacyChunkStore.getFilename(chunk));
        }
    }

    @Command(
        aliases = { "delchunks" },
        usage = "",
        desc = "Delete chunks that your selection includes",
        min = 0,
        max = 0
    )
    @CommandPermissions("worldedit.delchunks")
    @Logging(REGION)
    public void deleteChunks(CommandContext args, LocalSession session, LocalPlayer player,
            EditSession editSession) throws WorldEditException {

        player.print("Note that this command does not yet support the mcregion format.");
        LocalConfiguration config = we.getConfiguration();

        Set<Vector2D> chunks = session.getSelection(player.getWorld()).getChunks();
        FileOutputStream out = null;

        if (config.shellSaveType == null) {
            player.printError("Shell script type must be configured: 'bat' or 'bash' expected.");
        } else if (config.shellSaveType.equalsIgnoreCase("bat")) {
            try {
                out = new FileOutputStream("worldedit-delchunks.bat");
                OutputStreamWriter writer = new OutputStreamWriter(out, "UTF-8");
                writer.write("@ECHO off\r\n");
                writer.write("ECHO This batch file was generated by WorldEdit.\r\n");
                writer.write("ECHO It contains a list of chunks that were in the selected region\r\n");
                writer.write("ECHO at the time that the /delchunks command was used. Run this file\r\n");
                writer.write("ECHO in order to delete the chunk files listed in this file.\r\n");
                writer.write("ECHO.\r\n");
                writer.write("PAUSE\r\n");

                for (Vector2D chunk : chunks) {
                    String filename = LegacyChunkStore.getFilename(chunk);
                    writer.write("ECHO " + filename + "\r\n");
                    writer.write("DEL \"world/" + filename + "\"\r\n");
                }

                writer.write("ECHO Complete.\r\n");
                writer.write("PAUSE\r\n");
                writer.close();
                player.print("worldedit-delchunks.bat written. Run it when no one is near the region.");
            } catch (IOException e) {
                player.printError("Error occurred: " + e.getMessage());
            } finally {
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException ie) { }
                }
            }
        } else if (config.shellSaveType.equalsIgnoreCase("bash")) {
            try {
                out = new FileOutputStream("worldedit-delchunks.sh");
                OutputStreamWriter writer = new OutputStreamWriter(out, "UTF-8");
                writer.write("#!/bin/bash\n");
                writer.write("echo This shell file was generated by WorldEdit.\n");
                writer.write("echo It contains a list of chunks that were in the selected region\n");
                writer.write("echo at the time that the /delchunks command was used. Run this file\n");
                writer.write("echo in order to delete the chunk files listed in this file.\n");
                writer.write("echo\n");
                writer.write("read -p \"Press any key to continue...\"\n");

                for (Vector2D chunk : chunks) {
                    String filename = LegacyChunkStore.getFilename(chunk);
                    writer.write("echo " + filename + "\n");
                    writer.write("rm \"world/" + filename + "\"\n");
                }

                writer.write("echo Complete.\n");
                writer.write("read -p \"Press any key to continue...\"\n");
                writer.close();
                player.print("worldedit-delchunks.sh written. Run it when no one is near the region.");
                player.print("You will have to chmod it to be executable.");
            } catch (IOException e) {
                player.printError("Error occurred: " + e.getMessage());
            } finally {
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException ie) {
                    }
                }
            }
        } else {
            player.printError("Shell script type must be configured: 'bat' or 'bash' expected.");
        }
    }
}
